--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1063w[1..0]	: WIRE;
	w_anode1072w[3..0]	: WIRE;
	w_anode1089w[3..0]	: WIRE;
	w_anode1099w[3..0]	: WIRE;
	w_anode1109w[3..0]	: WIRE;
	w_anode1119w[3..0]	: WIRE;
	w_anode1129w[3..0]	: WIRE;
	w_anode1139w[3..0]	: WIRE;
	w_anode1149w[3..0]	: WIRE;
	w_anode1161w[1..0]	: WIRE;
	w_anode1168w[3..0]	: WIRE;
	w_anode1179w[3..0]	: WIRE;
	w_anode1189w[3..0]	: WIRE;
	w_anode1199w[3..0]	: WIRE;
	w_anode1209w[3..0]	: WIRE;
	w_anode1219w[3..0]	: WIRE;
	w_anode1229w[3..0]	: WIRE;
	w_anode1239w[3..0]	: WIRE;
	w_data1061w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1239w[3..3], w_anode1229w[3..3], w_anode1219w[3..3], w_anode1209w[3..3], w_anode1199w[3..3], w_anode1189w[3..3], w_anode1179w[3..3], w_anode1168w[3..3]), ( w_anode1149w[3..3], w_anode1139w[3..3], w_anode1129w[3..3], w_anode1119w[3..3], w_anode1109w[3..3], w_anode1099w[3..3], w_anode1089w[3..3], w_anode1072w[3..3]));
	w_anode1063w[] = ( (w_anode1063w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1072w[] = ( (w_anode1072w[2..2] & (! w_data1061w[2..2])), (w_anode1072w[1..1] & (! w_data1061w[1..1])), (w_anode1072w[0..0] & (! w_data1061w[0..0])), w_anode1063w[1..1]);
	w_anode1089w[] = ( (w_anode1089w[2..2] & (! w_data1061w[2..2])), (w_anode1089w[1..1] & (! w_data1061w[1..1])), (w_anode1089w[0..0] & w_data1061w[0..0]), w_anode1063w[1..1]);
	w_anode1099w[] = ( (w_anode1099w[2..2] & (! w_data1061w[2..2])), (w_anode1099w[1..1] & w_data1061w[1..1]), (w_anode1099w[0..0] & (! w_data1061w[0..0])), w_anode1063w[1..1]);
	w_anode1109w[] = ( (w_anode1109w[2..2] & (! w_data1061w[2..2])), (w_anode1109w[1..1] & w_data1061w[1..1]), (w_anode1109w[0..0] & w_data1061w[0..0]), w_anode1063w[1..1]);
	w_anode1119w[] = ( (w_anode1119w[2..2] & w_data1061w[2..2]), (w_anode1119w[1..1] & (! w_data1061w[1..1])), (w_anode1119w[0..0] & (! w_data1061w[0..0])), w_anode1063w[1..1]);
	w_anode1129w[] = ( (w_anode1129w[2..2] & w_data1061w[2..2]), (w_anode1129w[1..1] & (! w_data1061w[1..1])), (w_anode1129w[0..0] & w_data1061w[0..0]), w_anode1063w[1..1]);
	w_anode1139w[] = ( (w_anode1139w[2..2] & w_data1061w[2..2]), (w_anode1139w[1..1] & w_data1061w[1..1]), (w_anode1139w[0..0] & (! w_data1061w[0..0])), w_anode1063w[1..1]);
	w_anode1149w[] = ( (w_anode1149w[2..2] & w_data1061w[2..2]), (w_anode1149w[1..1] & w_data1061w[1..1]), (w_anode1149w[0..0] & w_data1061w[0..0]), w_anode1063w[1..1]);
	w_anode1161w[] = ( (w_anode1161w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1168w[] = ( (w_anode1168w[2..2] & (! w_data1061w[2..2])), (w_anode1168w[1..1] & (! w_data1061w[1..1])), (w_anode1168w[0..0] & (! w_data1061w[0..0])), w_anode1161w[1..1]);
	w_anode1179w[] = ( (w_anode1179w[2..2] & (! w_data1061w[2..2])), (w_anode1179w[1..1] & (! w_data1061w[1..1])), (w_anode1179w[0..0] & w_data1061w[0..0]), w_anode1161w[1..1]);
	w_anode1189w[] = ( (w_anode1189w[2..2] & (! w_data1061w[2..2])), (w_anode1189w[1..1] & w_data1061w[1..1]), (w_anode1189w[0..0] & (! w_data1061w[0..0])), w_anode1161w[1..1]);
	w_anode1199w[] = ( (w_anode1199w[2..2] & (! w_data1061w[2..2])), (w_anode1199w[1..1] & w_data1061w[1..1]), (w_anode1199w[0..0] & w_data1061w[0..0]), w_anode1161w[1..1]);
	w_anode1209w[] = ( (w_anode1209w[2..2] & w_data1061w[2..2]), (w_anode1209w[1..1] & (! w_data1061w[1..1])), (w_anode1209w[0..0] & (! w_data1061w[0..0])), w_anode1161w[1..1]);
	w_anode1219w[] = ( (w_anode1219w[2..2] & w_data1061w[2..2]), (w_anode1219w[1..1] & (! w_data1061w[1..1])), (w_anode1219w[0..0] & w_data1061w[0..0]), w_anode1161w[1..1]);
	w_anode1229w[] = ( (w_anode1229w[2..2] & w_data1061w[2..2]), (w_anode1229w[1..1] & w_data1061w[1..1]), (w_anode1229w[0..0] & (! w_data1061w[0..0])), w_anode1161w[1..1]);
	w_anode1239w[] = ( (w_anode1239w[2..2] & w_data1061w[2..2]), (w_anode1239w[1..1] & w_data1061w[1..1]), (w_anode1239w[0..0] & w_data1061w[0..0]), w_anode1161w[1..1]);
	w_data1061w[2..0] = data_wire[2..0];
END;
--VALID FILE
